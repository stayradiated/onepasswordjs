// Generated by CoffeeScript 1.6.3
(function() {
  var Crypto, Item, Opdata,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Crypto = require('./crypto');

  Opdata = require('./opdata');

  /**
   * @class An item stores data such as usernames and passwords.
  */


  Item = (function() {
    /**
     * Create a new Item.
     * - keychain {kecyhain} : The keychain to encrypt the item with.
     * - data {object} : The data to add to the Item.
     * > item - the item.
    */

    Item.create = function(keychain, data) {
      var item, timeNow;
      timeNow = Math.floor(Date.now() / 1000);
      item = new Item(keychain, {
        uuid: Crypto.generateUuid(),
        created: timeNow,
        updated: timeNow,
        category: '001'
      });
      item.overview = {
        title: data.title,
        ainfo: data.username,
        url: data.url,
        URLS: [
          {
            l: 'website',
            u: data.url
          }
        ]
      };
      item.details = {
        fields: [
          {
            type: 'T',
            name: 'username',
            value: data.username,
            designation: 'username'
          }, {
            type: 'P',
            name: 'password',
            value: data.password,
            designation: 'password'
          }
        ],
        notesPlain: data.notes || ''
      };
      item.keys = {
        encryption: Crypto.randomBytes(32),
        hmac: Crypto.randomBytes(32)
      };
      item.encrypt('all');
      return item;
    };

    /**
     * Create a new Item instance.
     * - [attrs] {object} : Any attributes to load into the item
    */


    function Item(keychain, attrs) {
      var attr, key;
      this.keychain = keychain;
      this.match = __bind(this.match, this);
      this.toJSON = __bind(this.toJSON, this);
      this.keysUnlocked = false;
      this.detailsUnlocked = false;
      this.overviewUnlocked = false;
      this.encrypted = {};
      if (attrs != null) {
        for (key in attrs) {
          attr = attrs[key];
          this[key] = attr;
        }
      }
    }

    /**
     * Load attributes from the exported format
     * - data {object} : Data to load
     * > this
    */


    Item.prototype.load = function(data) {
      var key, _i, _j, _len, _len1, _ref, _ref1;
      _ref = ['category', 'created', 'fave', 'folder', 'tx', 'trashed', 'updated', 'uuid'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (data.hasOwnProperty(key)) {
          this[key] = data[key];
        }
      }
      _ref1 = ['d', 'hmac', 'k', 'o'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        key = _ref1[_j];
        if (!data.hasOwnProperty(key)) {
          continue;
        }
        data[key] = Crypto.fromBase64(data[key]);
      }
      this.hmac = data.hmac;
      this.encrypted.keys = data.k;
      this.encrypted.details = data.d;
      this.encrypted.overview = data.o;
      return this;
    };

    /**
     * Lock the item. Deletes the unencrypted data.
     * - type {string} : what to lock - all, keys, details or overview
     * > this
    */


    Item.prototype.lock = function(type) {
      var detailsUnlocked, keysUnlocked, overviewUnlocked;
      switch (type) {
        case 'all':
          this.lock('keys');
          this.lock('details');
          this.lock('overview');
          break;
        case 'keys':
          delete this.keys;
          keysUnlocked = false;
          break;
        case 'details':
          delete this.details;
          detailsUnlocked = false;
          break;
        case 'overview':
          delete this.overview;
          overviewUnlocked = false;
      }
      return this;
    };

    /**
     * Decrypt the item data.
     * - type {string} : The part of the item to unlock. Can be all, keys, 
     *   details or overview.
     * > this, keys, details, or overveiw
    */


    Item.prototype.unlock = function(type) {
      var json, keys;
      switch (type) {
        case 'all':
          this.unlock('keys');
          this.unlock('details');
          this.unlock('overview');
          return this;
        case 'keys':
          keys = this.keychain.master.decrypt('itemKey', this.encrypted.keys);
          this.keys = new Opdata(new Buffer(keys[0], 'hex'), new Buffer(keys[1], 'hex'));
          this.keysUnlocked = true;
          return this.keys;
        case 'details':
          if (!this.keysUnlocked) {
            this.unlock('keys');
          }
          json = this.keys.decrypt('item', this.encrypted.details);
          this.details = JSON.parse(json);
          this.detailsUnlocked = true;
          return this.details;
        case 'overview':
          json = this.keychain.overview.decrypt('item', this.encrypted.overview);
          this.overview = JSON.parse(json);
          this.overviewUnlocked = true;
          return this.overview;
      }
    };

    /**
     * Encrypt the item data.
     * - type {string} : The part of the item to encrypt. Can be all, keys,
     *   details or overview.
     * > this
    */


    Item.prototype.encrypt = function(type) {
      var buffer, joined;
      switch (type) {
        case 'all':
          this.encrypt('keys');
          this.encrypt('details');
          this.encrypt('overview');
          break;
        case 'keys':
          joined = Buffer.concat([this.keys.encryption, this.keys.hmac]);
          this.encrypted.keys = this.keychain.master.encrypt('itemKey', joined);
          break;
        case 'details':
          if (!this.keysUnlocked) {
            this.unlock('keys');
          }
          buffer = new Buffer(JSON.stringify(this.details));
          this.encrypted.details = this.keys.encrypt('item', buffer);
          break;
        case 'overview':
          buffer = new Buffer(JSON.stringify(this.overview));
          this.encrypted.overview = this.keychain.overview.encrypt('item', buffer);
      }
      return this;
    };

    /**
     * Calculate the hmac of the item
     * TODO: Find out why it doesn't work...
     * - key {Buffer} : The master hmac key
     * > string - The hmac of the item encoded in hex
    */


    Item.prototype.calculateHmac = function(key) {
      var data, dataToHmac, element, hmac, _ref;
      dataToHmac = "";
      console.log(this.toJSON());
      _ref = this.toJSON();
      for (element in _ref) {
        data = _ref[element];
        if (element === "hmac") {
          continue;
        }
        dataToHmac += element + data;
      }
      dataToHmac = new Buffer(dataToHmac);
      hmac = Crypto.hmac(dataToHmac, key, 256, 'hex');
      console.log(hmac);
      return console.log(this.hmac.toString('hex'));
    };

    /**
     * Turn an item into a JSON object.
     * > Object - the JSON object.
    */


    Item.prototype.toJSON = function() {
      var _ref;
      return {
        category: this.category,
        created: this.created,
        d: this.encrypted.details.toString('base64'),
        hmac: (_ref = this.hmac) != null ? _ref.toString('base64') : void 0,
        k: this.encrypted.keys.toString('base64'),
        o: this.encrypted.overview.toString('base64'),
        tx: this.tx,
        updated: this.updated,
        uuid: this.uuid
      };
    };

    /**
     * Check to see if an item matches a query. Used for filtering items.
     * - query {string} : The search query.
     * > Boolean - Whether or not the item matches the query.
    */


    Item.prototype.match = function(query) {
      var regex;
      regex = new RegExp(query, 'i');
      return this.overview.title.match(regex);
    };

    return Item;

  }).call(this);

  module.exports = Item;

}).call(this);
